print("{} is {}'s favorite school. ".format(school, name))
print("{a} is {b}'s favorite school. ".format(b = name, a = school))
quit
reticulate::repl_python()
hour_salary = 125.5
work_hour = 7
work_day = 21
month_income = hour_salary*work_hour*work_day
print("月薪%d"%month_income)
quit
reticulate::repl_python()
hour_salary = 125.5
work_hour = 7
work_day = 21
month_income = hour_salary*work_hour*work_day
print("月薪%d"%month_income)
print("月薪%.2f"%month_income)
print("月薪%.3f"%month_income)
9%2
9//2
5**2
x, y = 10, 11
print(x, y)
print(type(3))
print(type(5/3))
print(type('abc'))
x = 5
type(x)
y = x + 5.5
type(x)
quit
reticulate::repl_python()
x = 5
type(x)
y = x + 5.5
type(x)
type(y)
print(type(x))
x = 10.5
print(type(x))
quit
reticulate::repl_python()
x = 10.5
print(type(x))
y = int(x) + 5
print(type(y))
x
int(x)
x = 10.6
int(x)
type(True)
type(TRUE)
x = '''gfjgfjjkgjkgkgkhgkgh
ghkgkhjkg'''
print(x)
quit
reticulate::repl_python()
x = '''gfjgfjjkgjkgkgkhgkghjldaaalkj;l;kljj;j;kl;jlkjkj;j;lkj;j;lj;lkj;lkj;lkj;ljlklkknmnj;lkj;klghkgkhjkg'''
print(x)
quit
reticulate::repl_python()
x = '''jj;j;kl;jlkjkj;j;lkj;j;lj;lkj;lkj;lkj;ljlklkknmnj;lkj;klghkgkhjkg'''
print(x)
quit
name = input("name: ")
reticulate::repl_python()
name = input("name: ")
Jacky
quit
reticulate::repl_python()
name = input("name: ")
print(name)
quit
reticulate::repl_python()
name = input("name: ")
print(name)
name = input("name: ")
jacky
print(name)
fah = float(input("請輸入華氏溫度: "))
100
print("攝氏%.2f"%(cel))
cel = (fah-32)*5/9
print("攝氏%.2f"%(cel))
print("too young! ")
quit
reticulate::repl_python()
age = input("How old are you? ")
if age<20:
print("too young! ")
age = input("How old are you? ")
18
print("too young! ")
if age<20:
print("too young! ")
age = int(input("How old are you? "))
age = int(input("How old are you? "))
age = int(input("How old are you? "))
15
if age<20:
print("too young! ")
age = int(input("How old are you? "))
18
if age<20:
print("too young! ")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("C:\\Users\\User\\anaconda3\\envs\\pyClassEnv_ntpu\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("pyClassEnv_ntpu", required = T)
reticulate::repl_python()
hour_salary = 150
work_hour = 8
work_day = 22
salary_income = hour_salary*work_hour*work_day
print("月薪", salary_income, "元")
quit
reticulate::repl_python()
school = "TMU"
name = "David"
school + " is " + name + "'s favorite school. "
print("%s is %s's favorite school. " % (school, name))    # %s：格式化字串輸出
print("%s got %d marks on math exam. " % (name, 85))
"物理"
print("{} is {}'s favorite school. ".format(school, name))
print("{0} is {1}'s favorite school. ".format(school, name))
print("{1} is {0}'s favorite school. ".format(school, name))
print("{1} is {0}'s favorite school. ".format(names, chool))
print("{1} is {0}'s favorite school. ".format(name, chool))
print("{1} is {0}'s favorite school. ".format(name, school))
quit
reticulate::repl_python()
school = "TMU"
name = "David"
school + " is " + name + "'s favorite school. "
print("%s is %s's favorite school. " % (school, name))    # %s：格式化字串輸出
print("%s got %d marks on math exam. " % (name, 85))    # %d：格式化整數輸出
print("{} is {}'s favorite school. ".format(school, name))
print("{1} is {0}'s favorite school. ".format(name, school))
print("{a} is {b}'s favorite school. ".format(b = name, a = school))
hour_salary = 125.5
work_hour = 7
work_day = 21
month_income = hour_salary*work_hour*work_day
print("月薪%.2f"%month_income)
print("monthly income: %.2f"%month_income)
print("monthly income: %.2f" % month_income)
print("monthly income: %.3f" % month_income)
quit
reticulate::repl_python()
hour_salary = 125.5
work_hour = 7
work_day = 21
month_income = hour_salary*work_hour*work_day
print("monthly income: %.2f" % month_income)
print("monthly income: %.3f" % month_income)
print("monthly income: %2.2f" % month_income)
print("monthly income: %5.2f" % month_income)
print("monthly income: %6.2f" % month_income)
print("monthly income: %10.2f" % month_income)
print("monthly income: %1.2f" % month_income)
quit
reticulate::repl_python()
hour_salary = 125.5
work_hour = 7
work_day = 21
month_income = hour_salary*work_hour*work_day
print("monthly income: %.2f" % month_income)
print("monthly income: %.3f" % month_income)
x = 100; y = 10.5; z = 'Deep'
print('/%d/' % (x))
print('/%2d/' % (x))
print('/%3d/' % (x))
print('/%4d/' % (x))
print('/%5d/' % (x))
print('/%3d/' % (x)); print('/%4d/' % (x)); print('/%5d/' % (x))
print('/%4d/' % (x))
print('/%f/' % (y))
print('/%4.1f/' % (y))
print('/%5.1f/' % (y))
print('/%s/' % (z))
print('/%5s/' % (z))
print('/%1d/' % (x))
print('/%5.2f/' % (y))
print('/%3.2f/' % (y))
print('/%2s/' % (z))
quit
reticulate::repl_python()
x = 100; y = 10.5; z = 'Deep'
print('/%4d/' % (x))    # 保留4格
print('/%5.1f/' % (y))    # 保留5格（小數點也算），小數保留一格
print('/%5s/' % (z))
# 格數不足，照常顯示
print('/%1d/' % (x))
print('/%3.2f/' % (y))
print('/%2s/' % (z))
a = b = c = 10
a = b = c = 10
d = a+\
b+\
c
print(d)
a = b = c = 10
d = a+\
b+\
c
print(d)
x = 10.6
print(type(x))
y = int(x) + 5    # int()轉整數
print(type(y))
x = 10.6
int(x)
quit
reticulate::repl_python()
x = 10.6
int(x)    # int()：轉整數（直接捨去小數）
quit
reticulate::repl_python()
# py之布林值
type(True)
type(False)
quit
reticulate::repl_python()
x = '''jj;j;kl;jlkjkj;j;lkj;j;lj;lkj;lkj;lkj;ljlklkknmnj;lkj;klghkgkhjkg'''
print(x)
fah = float(input("degrees Fahrenheit: "))
100
cel = (fah-32)*5/9
print("degrees Celsius: %.2f"%(cel))
fah = float(input("degrees Fahrenheit: "))
cel = (fah-32)*5/9
print("degrees Celsius: %.2f"%(cel))
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("C:\\Users\\User\\anaconda3\\envs\\pyClassEnv_ntpu\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("pyClassEnv_ntpu", required = T)
reticulate::repl_python()
"你好"
"你好".encode('utf-8')
u"你好".encode('utf-8')
print "你好".encode('utf-8')
print("你好".encode('utf-8'))
print(u"你好".encode('utf-8'))
print("你好".encode('utf-8'))
print("你好")
print("你好".encode("windows1252"))
print("你好".encode("windows-1252"))
print("你好".encode("BIG5"))
print("你好".encode("GB2312"))
print("你好".encode("UTF-8"))
print(U"你好".encode("UTF-8"))
print(u"你好".encode("utf-8"))
print("你好")
print("你好")
sys.getdefaultencoding()
print("你好")
print("你好", sys.getdefaultencoding())
import sys
print("你好", sys.getdefaultencoding())
print("你好".encode("gbk"))
print("你好".decode(encoding='gbk').encode(encoding='utf-8').decode(encoding='utf-8'))
"你好".encode(encoding='gbk')
s2gbk = "你好".encode(encoding='gbk')
s2gbk.decode(encoding='gbk').encode(encoding='utf-8').decode(encoding='utf-8')
quit
sessionInfo()
package_version("rmarkdown")
packageVersion("rmarkdown")
install.packages("rmarkdown")
packageVersion("rmarkdown")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("C:\\Users\\User\\anaconda3\\envs\\pyClassEnv_ntpu\\python.exe", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("C:\\Users\\User\\anaconda3\\envs\\pyClassEnv_ntpu\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("pyClassEnv_ntpu", required = T)
reticulate::repl_python()
print("{a:3d}{b:4f}".format(a = 100, b = 1.2345))
print("{a:d}{b:4f}".format(a = 100, b = 1.2345))
print("{a:d} {b:4f}".format(a = 100, b = 1.2345))
print("{a:3d} {b:4f}".format(a = 100, b = 1.2345))
print("{a:3d} \n {b:4f}".format(a = 100, b = 1.2345))
print("{a:3d} \n{b:4f}".format(a = 100, b = 1.2345))
print("{a:3d}\n{b:4f}".format(a = 100, b = 1.2345))
print("{a:03d}\n{b:4f}".format(a = 100, b = 1.2345))
print("{a:3d}\n{b:4f}".format(a = 100, b = 1.2345))
print("{a:4d}\n{b:4f}".format(a = 100, b = 1.2345))
print("{a:3d}\n{b:4f}".format(a = 100, b = 1.2345))
print("{a:3d}\n{b:.4f}".format(a = 100, b = 1.2345))
print("{a:4d}\n{b:.5f}".format(a = 100, b = 1.2345))
quit
reticulate::repl_python()
print("{a:3d}\n{b:.4f}".format(a = 100, b = 1.2345))
print("{a:4d}\n{b:.5f}".format(a = 100, b = 1.2345))
quit
reticulate::repl_python()
print("{a:3d}\n{b:.4f}".format(a = 100, b = 1.2345))
james = [23,18,15,51,36]
g1, g2, g3, g4, g5 = james
print("Lebron James' score in last 5 games:", g1, g2, g3, g4, g5)
del g1, g2, g3, g4, g5
print("Lebron James' score in G1-G3:", james[0], james[1], james[2])
print("Lebron James' score in G1-G3:", james[0:3])    # 0~2
quit
reticulate::repl_python()
james = [23,18,15,51,36]
g1, g2, g3, g4, g5 = james
print("Lebron James' score in last 5 games:", g1, g2, g3, g4, g5)
del g1, g2, g3, g4, g5
print("Lebron James' score in G1-G3:", james[0], james[1], james[2])
quit
reticulate::repl_python()
print("Lebron James' score in G1-G3:", james[0:3])    # 0~2
print("Lebron James' score in G1-G3:", james[:3])
print("Lebron James' score in G1, G3, G5:", james[0:6:2])
print("Lebron James' score in G3-G5:", james[-3:])
quit
reticulate::repl_python()
print("Lebron James' score in G1-G3:", james[0:3])    # 0~2
print("Lebron James' score in G1-G3:", james[:3])
print("Lebron James' score in G1, G3, G5:", james[0:6:2])    # 0, 2, 4
print("Lebron James' score in G3-G5:", james[-3:])
quit
reticulate::repl_python()
james = [23,18,15,51,36]
print("highest: ", max(james))
print("lowest: ", min(james))
print("sum: ", sum(james))
print("mean: %.2f" % (sum(james)/len(james)))
quit
reticulate::repl_python()
james = [23,18,15,51,36]
print("maximum: ", max(james))
print("minimum: ", min(james))
print("sum: ", sum(james))
print("mean: %.2f" % (sum(james)/len(james)))
print("mean: %.1f" % (sum(james)/len(james)))
quit
reticulate::repl_python()
james = [23,18,15,51,36]
print("maximum: ", max(james))
print("minimum: ", min(james))
print("sum: ", sum(james))
print("mean: %.1f" % (sum(james)/len(james)))
quit
reticulate::repl_python()
james = [23,18,15,51,36]
print("Lebron James' score in G1-G3:", james[0:3])    # 0~2
print("Lebron James' score in G1-G3:", james[:3])
print("Lebron James' score in G1, G3, G5:", james[0:6:2])    # 0, 2, 4
print("Lebron James' score in G3-G5:", james[-3:])
quit
reticulate::repl_python()
james = [23,18,15,51,36]
print("maximum: ", max(james))
print("minimum: ", min(james))
print("sum: ", sum(james))
print("mean: %.1f" % (sum(james)/len(james)))
len(james)
len(james)
james = [23,18,15,51,36]
print(james)
james[0] = 33
print(james)
quit
reticulate::repl_python()
james = [23,18,15,51,36]
print(james)
james[0] = 33
print(james)
del james
car1 = ['BMW', 'BENZ', 'AUDI']
car2 = ['TOYOTA', 'NISSAN']
car1 += car2    # car1 = car1 + car2
print(car1)
car1 += car2    # car1 = car1 + car2
print(car1)
quit
reticulate::repl_python()
car1 = ['BMW', 'BENZ', 'AUDI']
car2 = ['TOYOTA', 'NISSAN']
car1 += car2    # car1 = car1 + car2
print(car1)
car = ['BMW', 'BENZ', 'AUDI', 'TOYOTA', 'NISSAN']
car
print(car)
del car[0:2]
print(car)
car1 = ['BMW', 'BENZ', 'AUDI']
car2 = ['TOYOTA', 'NISSAN']
car1 = ['BMW', 'BENZ', 'AUDI']
car2 = 'TOYOTA'
car3 = ['NISSAN', 'SUZUKI']
car1.append(car2)    #
print(car1)
car1.append(car2); print(car1)
car1 = ['BMW', 'BENZ', 'AUDI']
car2 = 'TOYOTA'
car3 = ['NISSAN', 'SUZUKI']
car1.append(car2); print(car1)
car1.append(car3); print(car1)
car1 = ['BMW', 'BENZ', 'AUDI']
car1.extend(car3); print(car3)    # 僅有元素產生
car1 = ['BMW', 'BENZ', 'AUDI']
car1.extend(car3); print(car3)    # 僅有元素產生
car1 = ['BMW', 'BENZ', 'AUDI']
car1.extend(car3); print(car1)    # 僅有元素產生
print(car1)
len(car3)
len(car2)
len(33)
len("你好")
car1 = ['BMW', 'BENZ', 'AUDI']
car2 = 'TOYOTA'
car3 = ['NISSAN', 'SUZUKI']
car1.append(car2); print(car1)
car1.append(car3); print(car1)    # 直接在串列末端新增元素
car1 = ['BMW', 'BENZ', 'AUDI']
car1.extend(car3); print(car1)    # 先將串列分解成一般元素，再一一加入
car1 = ['BMW', 'BENZ', 'AUDI', 'TOYOTA', 'NISSAN']
car1.pop()
print(car1)
car1.pop()
print(car1)
car1.pop(0)
print(car1)
car1 = ['BMW', 'BENZ', 'AUDI', 'TOYOTA', 'NISSAN']
# 不指定，刪最後一筆
car1.pop()    # 會回傳刪除的值
print(car1)
car1.pop(0)
print(car1)
quit
reticulate::repl_python()
car1 = ['BMW', 'BENZ', 'AUDI', 'TOYOTA', 'NISSAN']
# 不指定，刪最後一筆
car1.pop()    # 會回傳刪除的值
print(car1)
# 指定
car1.pop(0)
print(car1)
quit
reticulate::repl_python()
car = ['BMW', 'BENZ', 'AUDI', 'TOYOTA', 'NISSAN']
# 不指定，刪最後一筆
car.pop()    # 會回傳刪除的值
print(car1)
# 指定
car.pop(0)
print(car1)
car.index('NISSAN')
car = ['BMW', 'BENZ', 'AUDI', 'TOYOTA', 'NISSAN']
car.index('NISSAN')
car = ['BMW', 'BENZ', 'AUDI', 'TOYOTA', 'NISSAN']
car.index('AUDI')
del car[car.index('AUDI')]
car
car.index('AUDI')
print(car)
car = []
car.append('HONDA')
car = []
car.append('HONDA'); print(car)
car.append('FORD'); print(car)
car.append('VOLVO'); print(car)
car.insert(1, "NISSAN"); print(car)
car = ['BMW', 'NISSAN', 'BENZ', 'AUDI', 'NISSAN', 'TOYOTA', 'NISSAN']
car.remove("NISSAN")
print(car)    # 還有NISSAN
quit
reticulate::repl_python()
car = ['BMW', 'NISSAN', 'BENZ', 'AUDI', 'NISSAN', 'TOYOTA', 'NISSAN']
car.remove("NISSAN")    # 刪除指定值
print(car)    # 只刪除一個'NISSAN'
car.remove("NISSAN")    # 刪除指定值
car.remove("NISSAN")    # 刪除指定值
print(car)    # 只刪除第一個'NISSAN'
cars = ['BMW', 'BENZ', 'AUDI', 'NISSAN', 'VOLVO', 'TOYOTA', 'MAZDA']
del cars
quit
reticulate::repl_python()
car = ['BMW', 'BENZ', 'AUDI', 'NISSAN', 'VOLVO', 'TOYOTA', 'MAZDA']
print(car)
car.reverse()
print(car)
james = [23, 18, 15, 51, 36]
james = [23, 18, 15, 51, 36]
print(james)
james.sort()
print(james)
james.sort(reverse=True)
print(james)
quit
reticulate::repl_python()
car = ['BMW', 'BENZ', 'BMW', 'AUDI', 'NISSAN', 'VOLVO', 'BMW', 'TOYOTA', 'MAZDA']
car.count('BMW')
car = ['BMW', 'BENZ', 'AUDI', 'TOYOTA', 'NISSAN', 'AUDI']
car.index('AUDI')
del car[car.index('AUDI')]
print(car)
cars[4][1]
cars = ['BMW', 'BENZ', 'AUDI', 'NISSAN', ['VOLVO', 'FORD', 'MAZDA']]
cars[4][1]
cars[4][0]
