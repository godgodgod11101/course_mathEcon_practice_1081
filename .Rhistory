updated_result.append(
{'time': '2019/10/30 15:00:00', 'location': '新北市三峽區大學路151號', 'locationName': '國立臺北大學'}
)
updated_result = search_by_uid('5c9a1560d083a30290d1b36f').copy()
updated_result.append(
{'time': '2019/10/30 15:00:00', 'location': '新北市三峽區大學路151號', 'locationName': '國立臺北大學'}
)
updated_result = search_by_uidT('5c9a1560d083a30290d1b36f').copy()
updated_result.append(
{'time': '2019/10/30 15:00:00', 'location': '新北市三峽區大學路151號', 'locationName': '國立臺北大學'}
)
danceInfo[0]["showInfo"]
danceInfo[0]["showInfo"]
quit
repl_python()
search_by_uidT('5c9a1560d083a30290d1b36f').append(
{'time': '2019/10/30 15:00:00', 'location': '新北市三峽區大學路151號', 'locationName': '國立臺北大學'}
)
danceInfo[0]["showInfo"]
quit
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
repl_python()
del samSp1
quit
repl_python()
eventSp
quit
repl_python()
repl_python()
eventSp
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
repl_python()
[event.issubset(omega1) for event in eventSp]
exit
repl_python()
prob = 0.5
omega1
list(omega1)[0]
list(omega1)[0][0]
exit
repl_python()
len(omega1)
exit
repl_python()
omega1Prob[0]
quit
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
repl_python()
stPoint
quit
repl_python()
stPoint
[range(11)]
list(range(11))
quit
repl_python()
x_partition = np.array()
x_partition = np.array([])
x_partition
quit
repl_python()
round(2.1500000000000004)
round(2.1500000000000004, 2)
quit
repl_python()
round(2.1500000000000004[, 2])
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
repl_python()
x_interval_100
quit
knitr::include_graphics("https://github.com/tpemartin/course-108-1-inclass-program-for-math-econ/blob/master/fig/hw3Figure_1.png?raw=true")
reticulate::repl_python()
import matplotlib.pyplot as plt
Nsequence = np.arange(100,1501)
Rsum = [riemannsum(f,[2,3],N_i) for N_i in Nsequence]
plt.plot(Nsequence, Rsum, 'b-', linewidth=2)
plt.show()
quit
conda_install(
envname = "classEnvironment",
packages = "matplotlib"
)
reticulate::repl_python()
def riemannsum(fun,interval,N=101,alpha=0.5):
""" Riemann sum
Args:
fun: a function. takes np.array as its input and returns function value for each array element
interval: a list/tuple. defines the integral lower bound a and upper bound b
N: int. N-1 is the number of intervals to partition 'interval'
alpha: float. between 0,1. determine function value evalutated point within each partition interval.
Return:
the value of Riemann sum
"""
stPoint = np.linspace(start = interval[0], stop = interval[1], num = N)
list_xInterval = []
for i in range(len(stPoint)-1):
list_xInterval.append([stPoint[i], stPoint[i+1]])
list_xInterval = np.array(list_xInterval)
list_xStar = []
for i in range(len(list_xInterval)):
xStar = list_xInterval[i][0] + alpha*(list_xInterval[i][1]-list_xInterval[i][0])
list_xStar.append(xStar)
rsum = 0
for i in range(len(list_xInterval)):
rsum += fun(list_xStar[i])*(list_xInterval[i][1]-list_xInterval[i][0])
return rsum
# q2ans['riemannsum function']=riemannsum
import matplotlib.pyplot as plt
Nsequence = np.arange(100,1501)
Rsum = [riemannsum(f,[2,3],N_i) for N_i in Nsequence]
plt.plot(Nsequence, Rsum, 'b-', linewidth=2)
plt.show()
np.arange(100,1501)
def riemannsum(fun,interval,N=101,alpha=0.5):
""" Riemann sum
Args:
fun: a function. takes np.array as its input and returns function value for each array element
interval: a list/tuple. defines the integral lower bound a and upper bound b
N: int. N-1 is the number of intervals to partition 'interval'
alpha: float. between 0,1. determine function value evalutated point within each partition interval.
Return:
the value of Riemann sum
"""
# make 'interval' array like array([[2, 2.1], [2.1, 2.2], ...])
stPoint = np.linspace(start = interval[0], stop = interval[1], num = N)
list_xInterval = []
for i in range(len(stPoint)-1):
list_xInterval.append([stPoint[i], stPoint[i+1]])
list_xInterval = np.array(list_xInterval)
# make 'x*' list like [2.05, 2.15, ...]
list_xStar = []
for i in range(len(list_xInterval)):
xStar = list_xInterval[i][0] + alpha*(list_xInterval[i][1]-list_xInterval[i][0])
list_xStar.append(xStar)
# Riemann sum
rsum = 0
for i in range(len(list_xInterval)):
rsum += fun(list_xStar[i])*(list_xInterval[i][1]-list_xInterval[i][0])
return rsum
# q2ans['riemannsum function']=riemannsum
quit
repl_python()
import matplotlib.pyplot as plt
Nsequence = np.arange(100,1501)
Rsum = [riemannsum(f,[2,3],N_i) for N_i in Nsequence]
plt.plot(Nsequence, Rsum, 'b-', linewidth=2)
plt.show()
exit
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
install.packages("reticulate")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
library(reticulate)
conda_create("pyClassEnv_ntpu")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("C:\\Users\\User\\anaconda3\\envs\\pyClassEnv_ntpu\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("pyClassEnv_ntpu", required = T)
conda_install(
envname = "pyClassEnv_ntpu",
packages = c("numpy", "pandas")
)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("C:\\Users\\User\\anaconda3\\envs\\pyClassEnv_ntpu\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("pyClassEnv_ntpu", required = T)
# reticulate::conda_install(
#   envname = "pyClassEnv_ntpu",    # 要安裝在哪個沙盒
#   packages = c("numpy", "pandas")    # 要安裝的modules
# )
# conda_install(
#   "pyClassEnv_ntpu",
#   c("google-api-python-client"),
#   pip=TRUE    # 先別放這行，試試conda可否安裝。（尚未安裝）
# )
# 建議能用conda安裝module就用conda安裝，因為現在是在conda創造的沙盒內寫code。
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("C:\\Users\\User\\anaconda3\\envs\\pyClassEnv_ntpu\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("pyClassEnv_ntpu", required = T)
conda_create(envname = "pyClassEnv_ntpu")
conda_install()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("C:\\Users\\User\\anaconda3\\envs\\pyClassEnv_ntpu\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("pyClassEnv_ntpu", required = T)
conda_install(
"pyClassEnv_ntpu",
packages = c("numpy", "pandas")
)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("C:\\Users\\User\\anaconda3\\envs\\pyClassEnv_ntpu\\python.exe", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("C:\\Users\\User\\anaconda3\\envs\\pyClassEnv_ntpu\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("pyClassEnv_ntpu", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("C:\\Users\\User\\anaconda3\\envs\\pyClassEnv_ntpu\\python.exe", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("C:\\Users\\User\\anaconda3\\envs\\pyClassEnv_ntpu\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("pyClassEnv_ntpu", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("C:\\Users\\User\\anaconda3\\envs\\pyClassEnv_ntpu\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("pyClassEnv_ntpu", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("C:\\Users\\User\\anaconda3\\envs\\pyClassEnv_ntpu\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("pyClassEnv_ntpu", required = T)
reticulate::repl_python()
def normalPdf(x,mean=0,sigma=1):
z=-(((x-mean)/sigma)**2)/2
pdfvalue=np.exp(z)/((2*np.pi*sigma**2)**(0.5))
return(pdfvalue)
normalPdf(1)
normalPdf(0)
normalPdf([2,3]) # not a vectorized function
quit
repl_python()
del normalPdf()
del normalPdf
quit
reticulate::repl_python()
y=np.array([[2,3,4,6]]).T
x=np.array([
[1,1,1,1],
[0,-2,4,7]
]
).T
y
x
yhat=x@inv(x.T@x)@x.T@y
e=y-yhat
np.log(e_pdf).sum()
e_pdf=vec_normalPdf(e)
np.log(e_pdf).sum()
y=np.array([[2,3,4,6]]).T
x=np.array([
[1,1,1,1],
[0,-2,4,7]
]
).T
y
x
yhat=x@inv(x.T@x)@x.T@y
e=y-yhat
e_pdf=vec_normalPdf(e)
def normalPdf(x,mean=0,sigma=1):
z=-(((x-mean)/sigma)**2)/2
pdfvalue=np.exp(z)/((2*np.pi*sigma**2)**(0.5))
return(pdfvalue)
normalPdf(1)
normalPdf(0)
normalPdf([2,3]) # not a vectorized function
vec_normalPdf=np.vectorize(normalPdf)
vec_normalPdf([2,3])
y=np.array([[2,3,4,6]]).T
x=np.array([
[1,1,1,1],
[0,-2,4,7]
]
).T
y
x
yhat=x@inv(x.T@x)@x.T@y
e=y-yhat
e_pdf=vec_normalPdf(e)
np.log(e_pdf).sum()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("C:\\Users\\User\\anaconda3\\envs\\pyClassEnv_ntpu\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("pyClassEnv_ntpu", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("C:\\Users\\User\\anaconda3\\envs\\pyClassEnv_ntpu\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("pyClassEnv_ntpu", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("C:\\Users\\User\\anaconda3\\envs\\pyClassEnv_ntpu\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("pyClassEnv_ntpu", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("C:\\Users\\User\\anaconda3\\envs\\pyClassEnv_ntpu\\python.exe", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("C:\\Users\\User\\anaconda3\\envs\\pyClassEnv_ntpu\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("pyClassEnv_ntpu", required = T)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("C:\\Users\\User\\anaconda3\\envs\\pyClassEnv_ntpu\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("pyClassEnv_ntpu", required = T)
reticulate::conda_install(
envname = "pyClassEnv_ntpu",
packages = "scipy"
)
