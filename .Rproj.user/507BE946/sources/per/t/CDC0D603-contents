---
title: "20191017 class"
author: "jacky wang"
date: "2020/8/7"
output: html_document
editor_options: 
  chunk_output_type: inline
---

```{r setup, include=FALSE}

knitr::opts_chunk$set(echo = TRUE)

library(reticulate)

# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:/anaconda3/envs/classEnvironment/python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
```

**技巧**

按小齒輪－＞按chunk output in console：讓console可編譯Python（>>> Python code）。
  在console打exit，就會回復原狀（> R code）。

在console裡打“repl_python()”，讓console可編譯Python（>>> Python code）。

shift + Tab：回彈兩格。

**連結**

https://opendata.culture.tw/ --> 文化資料開放服務網





# 資料引入練習

```{python}

# from requests import get 
# 
# traditionalPlay_raw = get('https://data.boch.gov.tw/data/opendata/v2/assetsCase/4.1.json')
# traditionalPlay = traditionalPlay_raw.json()

```

```{r}

# View(py$traditionalPlay)

```





# local and global

只有當list／dictionary裡面的元素為單純的atomic type，shallow copy的物件改變才不會影響到原本的物件。

```{python}

listJ = [1, 2, [3, 4]]    # nested list


listJDict = [
  {'A': 1, 'B': 2}, 
  {'A': 5, 'B': 8}
]    # list of dict

```

```{python}

listJCopy = listJ.copy()    # shallow copy
listJDictCopy = listJDict.copy()

```

```{python}

listJ
listJDict

listJ[2][0] = 'a'
listJDict[0]['A'] = 'a'

listJCopy
listJDictCopy

```

用shallow copy修改資料，不佔記憶體空間
```{python}

import requests
response=requests.get("https://cloud.culture.tw/frontsite/trans/SearchShowAction.do?method=doFindTypeJ&category=3")
danceInfo=response.json()

```

```{python}

[i for i in range(len(danceInfo)) if len(danceInfo[i]['showInfo']) > 5]

len(danceInfo[42]['showInfo'])

```

```{python}

danceInfo_42 = danceInfo[42]

# type it in the console

# danceInfo_42['showInfo'].append(
#   {'time': '2020/09/09 14:30:00', 'location': '桃園市桃園區三民路一段131號', 'locationName': '三民運動公園'}
# )

# danceInfo[42]['showInfo']

```



# 視函數為元素

```{python}

def add_fun(x, y): 
    return x+y

def sub_fun(x, y): 
    return x-y

dict_myFun = {
    'fun1': add_fun, 
    'fun2': sub_fun
}


```
內縮四格比較清楚。
儲存函數不要加“()”，“()”代表要啟動函數的意思。

```{python}

dict_myFun.keys()

```

```{python}

add_fun(1, 3); dict_myFun['fun1'](1, 3)
sub_fun(5, 2); dict_myFun['fun2'](5, 2)

del add_fun, sub_fun

```



# anonymous函數

函數很簡單時可使用anonymous function寫法，或稱為lambda function。

```{python}

lambda x, y: x+y

```

定義完馬上就用
```{python}

(lambda x, y: x+y)(1, 3)

```

存起來
```{python}

add_fun = lambda x, y: x+y

add_fun(1, 3)

```





# CH4 迴圈

# for loop

for <iterator> in <iterable>:
    body

```{python}

listJ = [0, 2, 5, 7, 8, 10, 15]

[listJ[i] for i in range(len(listJ)) if listJ[i] > 3]

```

```{python}

listResult = []

for i in range(len(listJ)): 
    if listJ[i] > 3: 
        listResult.append(listJ[i])

listResult

```

## practice1

找出每個danceInfo[i]下的showInfo有多少場，並加總計算全部場次數

```{python}

import requests
response = requests.get("https://cloud.culture.tw/frontsite/trans/SearchShowAction.do?method=doFindTypeJ&category=3")
danceInfo = response.json()

```

在R看python物件（reticulate底下的py）
```{r}

View(py$danceInfo)

```

在python看R物件
```{r}
a = c(1, 3, 5)
```

```{python}
r.a
```

解答
```{python}

list_howManyPlays = []

for i in range(len(danceInfo)): 
    list_howManyPlays.append(
      len(danceInfo[i]['showInfo'])
    )

sum(list_howManyPlays)

```

```{python}

int_totalPlay = 0

for i in range(len(danceInfo)): 
    int_totalPlay = int_totalPlay + len(danceInfo[i]['showInfo'])

int_totalPlay

```

節省記憶體的sum作法：“+=”（像method）
```{python}

int_totalPlay = 0

for i in range(len(danceInfo)): 
    int_totalPlay += len(danceInfo[i]['showInfo'])
    # like int_totalPlay.iadd(len(danceInfo[i]['showInfo']))

int_totalPlay

```

## practice2

```{python}

from random import randint

randint(0, 10)    # Return a random integer in range [a, b]. 


```

```{python}

listJ = [randint(0, 10) for i in range(0, 5)]
sumJ = 0

for i in range(len(listJ)): 
    sumJ += listJ[i]

listJ
sumJ

```

# for loop

```{python}

dict_example = {
    'list': [1, 3, -7, 4, 9, -5, 4], 
    'dict': {
      "date": [2001,2002,2003],
      "amount": [21000,33000,45880]
    }, 
    'matrix': [
      [2,5,4],
      [2,-1,3]
    ]
}


```

```{python}

m = dict_example['matrix']
m

```

## practice3

$$i = 1, \ \sum_{j=1}^3 m_{1j}$$
```{python}

sum1 = 0

for j in range(len(m[0])): 
  sum1 += m[0][j]

m[0]
sum1

```

$$i = 2, \ \sum_{j=1}^3 m_{2j}$$
```{python}

sum2 = 0

for j in range(len(m[1])): 
    sum2 += m[1][j]

m[1]
sum2

```

$$\sum_{i=1}^2 \sum_{j=1}^3 m_{ij}$$
```{python}

sumJ = 0

for i in range(len(m)): 
    for j in range(len(m[i])): 
        sumJ += m[i][j]

sumJ

```

## practice4

```{python}

covM = [
  [1, 3, 5], 
  [3, 1, 7], 
  [5, 7, 1]
]

```

$$\sum_{i=1}^3 \sum_{j=1}^{j<=i} covM_{ij}$$
```{python}

sumJ = 0

for i in range(len(covM)): 
    for j in range(len(covM[i])): 
        if j <= i: 
            sumJ += covM[i][j]

covM
sumJ

```

老師作法（best）
```{python}

sumT = 0

for i in range(len(covM)): 
    for j in range(i+1):     # same as range(0, i+1)
          sumT += covM[i][j]

sumT

```

老師作法
```{python}

sumT = 0

for i in range(len(covM)): 
    for j in range(len(covM[j])): 
        if j > i: 
            continue
        else: 
            sumT += covM[i][j]

sumT

```

## break、continue

break：跳出迴圈

continue：跳下一個

```{python}

covM = [
  [1, 3, 5], 
  [3, 1, 7], 
  [5, 7, 1]
]

```

加總矩陣內「大於3」的元素
```{python}

sumD = 0

for i in range(len(covM)): 
    for j in range(len(covM[i])): 
        if covM[i][j] <= 3: 
            continue
        else: 
            sumD += covM[i][j]

covM
sumD

```

i、j其實有被存下來（iterable最後一個值）
```{python}

i; j

```


