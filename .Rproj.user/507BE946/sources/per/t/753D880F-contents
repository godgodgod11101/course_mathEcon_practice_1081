---
title: "20191017 class"
author: "jacky wang"
date: "2020/8/7"
output: html_document
---

```{r setup, include=FALSE}

knitr::opts_chunk$set(echo = TRUE)

library(reticulate)

# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
```

**設定**

按小齒輪－＞按chunk output in console－＞彈出寫code視窗
chunk output in console讓console可編譯Python（>>> Python code）
在console打exit，就會回復原狀（> R code）

**技巧**
在console裡打 repl_python() ，讓console可編譯Python（>>> Python code）。





# local and global

只有當list／dictionary裡面的元素為單純的atomic type，shallow copy的物件改變才不會影響到原本的物件。

```{python}

listJ = [1, 2, [3, 4]]    # nested list


listJDict = [
  {'A': 1, 'B': 2}, 
  {'A': 5, 'B': 8}
]    # list of dict

```

```{python}

listJCopy = listJ.copy()    # shallow copy
listJDictCopy = listJDict.copy()

```

```{python}

listJ
listJDict

listJ[2][0] = 'a'
listJDict[0]['A'] = 'a'

listJCopy
listJDictCopy

```

用shallow copy修改資料，不佔記憶體空間
```{python}

import requests
response=requests.get("https://cloud.culture.tw/frontsite/trans/SearchShowAction.do?method=doFindTypeJ&category=3")
danceInfo=response.json()

```

```{python}

[i for i in range(len(danceInfo)) if len(danceInfo[i]['showInfo']) > 5]

len(danceInfo[42]['showInfo'])

```

```{python}

danceInfo_42 = danceInfo[42]

# type it in the console

# danceInfo_42['showInfo'].append(
#   {'time': '2020/09/09 14:30:00', 'location': '桃園市桃園區三民路一段131號', 'locationName': '三民運動公園'}
# )

# danceInfo[42]['showInfo']

```



# 視函數為元素

```{python}




```









